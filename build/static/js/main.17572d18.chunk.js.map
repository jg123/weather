{"version":3,"sources":["EnterLocation.tsx","Forecasts.tsx","ForecastContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EnterLocation","addLocation","useState","zipCode","setZipCode","addZipCode","a","window","localStorage","setItem","label","style","display","value","placeholder","onChange","event","target","fullWidth","onClick","marginLeft","Forecasts","forecasts","map","name","main","temp","feels_like","weather","description","icon","src","alt","ForecastContainer","setForecasts","addForecast","useCallback","location","axios","get","data","GlobalStyles","createGlobalStyle","ms_sans_serif","ms_sans_serif_bold","styleReset","App","background","height","padding","theme","original","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAoCeA,EAhCO,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,YAA+D,EACxDC,mBAAS,IAD+C,mBAC/EC,EAD+E,KACtEC,EADsE,KAGhFC,EAAU,uCAAG,sBAAAC,EAAA,sDACjBC,OAAOC,aAAaC,QAAQ,UAAWN,GACvCF,EAAYE,GAFK,2CAAH,qDAKhB,OACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAUO,MAAM,iBAAhB,6BAEE,8BACE,sBAAKC,MAAO,CAAEC,QAAS,QAAvB,UACE,cAAC,IAAD,CACEC,MAAOV,EACPW,YAAY,eACZC,SAAU,SAACC,GAAD,OACRZ,EAAWY,EAAMC,OAAOJ,QAE1BK,WAAS,IAEX,cAAC,IAAD,CAAQC,QAASd,EAAYM,MAAO,CAAES,WAAY,GAAlD,4BCWGC,EA5BG,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,UACnB,OACE,cAAC,IAAD,UACGA,EAAUC,KACT,gBACEC,EADF,EACEA,KADF,IAEEC,KAAQC,EAFV,EAEUA,KAAMC,EAFhB,EAEgBA,WAFhB,gBAGEC,QAHF,MAGcC,EAHd,EAGcA,YAAaC,EAH3B,EAG2BA,KAH3B,OAKE,cAAC,IAAD,CAAUpB,MAAOc,EAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UAAWK,IACX,cAAC,IAAD,UACE,qBACEE,IAAG,2CAAsCD,EAAtC,WACHE,IAAI,OAGR,eAAC,IAAD,mCAAgCN,EAAhC,WACA,eAAC,IAAD,0BAAuBC,EAAvB,sBCACM,EArBW,WAAO,IAAD,EACI/B,mBAAqB,IADzB,mBACvBoB,EADuB,KACZY,EADY,KAGxBC,EAAcC,sBAAW,uCAC7B,WAAOC,GAAP,iBAAA/B,EAAA,sEACyBgC,IAAMC,IAAN,6DACiCF,EADjC,2DADzB,gBACUG,EADV,EACUA,KAGRN,EAAa,GAAD,mBAAKZ,GAAL,CAAgBkB,KAJ9B,2CAD6B,sDAO7B,CAAClB,IAGH,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAerB,YAAakC,IAC5B,cAAC,EAAD,CAAWb,UAAWA,QCJtBmB,EAAeC,YAAH,+WAGFC,IAMAC,IAOZC,KAuBWC,EApBH,kBACV,qBACEnC,MAAO,CACLoC,WAAY,OACZC,OAAQ,SAHZ,SAME,sBACErC,MAAO,CACLsC,QAAS,QAFb,UAKE,cAACR,EAAD,IACA,cAAC,IAAD,CAAeS,MAAOC,IAAtB,SACE,cAAC,EAAD,YCtCOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.17572d18.chunk.js","sourcesContent":["import { useState } from \"react\";\n// @ts-ignore\nimport { WindowContent, Fieldset, TextField, Button } from \"react95\";\n\nconst EnterLocation = ({ addLocation }: { addLocation: (location: string) => void }) => {\n  const [zipCode, setZipCode] = useState(\"\");\n\n  const addZipCode = async () => {\n    window.localStorage.setItem(\"zipcode\", zipCode);\n    addLocation(zipCode);\n  };\n\n  return (\n    <WindowContent>\n      <Fieldset label=\"Add a location\">\n        Enter a zipcode:\n        <div>\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              value={zipCode}\n              placeholder=\"Type here...\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                setZipCode(event.target.value)\n              }\n              fullWidth\n            />\n            <Button onClick={addZipCode} style={{ marginLeft: 4 }}>\n              Add\n            </Button>\n          </div>\n        </div>\n      </Fieldset>\n    </WindowContent>\n  );\n};\n\nexport default EnterLocation;\n","// @ts-ignore\nimport { WindowContent, Fieldset, List, ListItem } from \"react95\";\n\nexport interface Forecast {\n  name: string;\n  main: { temp: number; feels_like: number };\n  weather: [{ description: string; icon: string }];\n}\n\nconst Forecasts = ({ forecasts }: { forecasts: Forecast[] }) => {\n  return (\n    <WindowContent>\n      {forecasts.map(\n        ({\n          name,\n          main: { temp, feels_like },\n          weather: [{ description, icon }]\n        }: Forecast) => (\n          <Fieldset label={name}>\n            <List>\n              <ListItem>{description}</ListItem>\n              <ListItem>\n                <img\n                  src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n                  alt=\"\"\n                />\n              </ListItem>\n              <ListItem>Current temperature: {temp}°F</ListItem>\n              <ListItem>Feels like: {feels_like}°F</ListItem>\n            </List>\n          </Fieldset>\n        )\n      )}\n    </WindowContent>\n  );\n};\n\nexport default Forecasts;\n","import axios from \"axios\";\nimport { useCallback, useState } from \"react\";\n// @ts-ignore\nimport { Window } from \"react95\";\nimport EnterLocation from \"./EnterLocation\";\nimport Forecasts, { Forecast } from \"./Forecasts\";\n\nconst ForecastContainer = () => {\n  const [forecasts, setForecasts] = useState<Forecast[]>([]);\n\n  const addForecast = useCallback(\n    async (location: string) => {\n      const { data } = await axios.get(\n        `http://api.openweathermap.org/data/2.5/weather?zip=${location}&appid=ea4304b1c266b2705e860ad3f9db7c89&units=imperial`\n      );\n      setForecasts([...forecasts, data]);\n    },\n    [forecasts]\n  );\n\n  return (\n    <Window>\n      <EnterLocation addLocation={addForecast} />\n      <Forecasts forecasts={forecasts} />\n    </Window>\n  );\n};\n\nexport default ForecastContainer;\n","import { createGlobalStyle, ThemeProvider } from \"styled-components\";\n\nimport {\n  styleReset\n  // @ts-ignore\n} from \"react95\";\n// pick a theme of your choice\n// @ts-ignore\nimport original from \"react95/dist/themes/original\";\n// @ts-ignore\n// import hotdogStand from \"react95/dist/themes/hotdogStand\";\n// original Windows95 font (optionally)\n// @ts-ignore\nimport ms_sans_serif from \"react95/dist/fonts/ms_sans_serif.woff2\";\n// @ts-ignore\nimport ms_sans_serif_bold from \"react95/dist/fonts/ms_sans_serif_bold.woff2\";\n\nimport ForecastContainer from \"./ForecastContainer\";\n\nconst GlobalStyles = createGlobalStyle`\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif}') format('woff2');\n    font-weight: 400;\n    font-style: normal\n  }\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif_bold}') format('woff2');\n    font-weight: bold;\n    font-style: normal\n  }\n  body {\n    font-family: 'ms_sans_serif';\n  }\n  ${styleReset}\n`;\n\nconst App = () => (\n  <div\n    style={{\n      background: \"teal\",\n      height: \"100vh\"\n    }}\n  >\n    <div\n      style={{\n        padding: \"5rem\"\n      }}\n    >\n      <GlobalStyles />\n      <ThemeProvider theme={original}>\n        <ForecastContainer />\n      </ThemeProvider>\n    </div>\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}