{"version":3,"sources":["EnterLocation.tsx","Forecasts.tsx","ForecastContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EnterLocation","addLocation","useState","zipCode","setZipCode","addZipCode","event","a","preventDefault","length","window","localStorage","setItem","style","minWidth","className","label","onSubmit","htmlFor","display","id","value","placeholder","onChange","target","fullWidth","type","marginLeft","Wrapper","styled","div","Forecasts","forecasts","removeForecast","map","name","dt","main","temp","feels_like","temp_min","temp_max","weather","description","icon","Intl","DateTimeFormat","timeStyle","format","Date","onClick","shadow","src","alt","ForecastContainer","setForecasts","addForecast","location","axios","get","process","data","find","filter","forecast","GlobalStyles","createGlobalStyle","ms_sans_serif","ms_sans_serif_bold","styleReset","App","padding","theme","original","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.997fcd5a.chunk.js","sourcesContent":["import { FormEvent, useState } from \"react\";\nimport {\n  Window,\n  WindowContent,\n  WindowHeader,\n  Fieldset,\n  TextField,\n  Button\n  // @ts-ignore\n} from \"react95\";\n\nconst EnterLocation = ({\n  addLocation\n}: {\n  addLocation: (location: string) => void;\n}) => {\n  const [zipCode, setZipCode] = useState(\"\");\n\n  const addZipCode = async (event: FormEvent) => {\n    event.preventDefault();\n    if (zipCode.length < 1) {\n      return;\n    }\n    window.localStorage.setItem(\"zipcode\", zipCode);\n    addLocation(zipCode);\n  };\n\n  return (\n    <Window style={{ minWidth: \"400px\" }}>\n      <WindowHeader className=\"window-header\">\n        <span>Weather</span>\n      </WindowHeader>\n      <WindowContent>\n        <Fieldset label=\"Add a location\">\n          <form onSubmit={addZipCode}>\n            <label htmlFor=\"enter-location\">Enter a zipcode:</label>\n            <div>\n              <div style={{ display: \"flex\" }}>\n                <TextField\n                  id=\"enter-location\"\n                  value={zipCode}\n                  placeholder=\"Type here...\"\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                    setZipCode(event.target.value)\n                  }\n                  fullWidth\n                />\n                <Button type=\"submit\" style={{ marginLeft: 4 }}>\n                  Add\n                </Button>\n              </div>\n            </div>\n          </form>\n        </Fieldset>\n      </WindowContent>\n    </Window>\n  );\n};\n\nexport default EnterLocation;\n","import {\n  Window,\n  WindowHeader,\n  Button,\n  List,\n  ListItem\n  // @ts-ignore\n} from \"react95\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  .window-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n  .close-icon {\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n    margin-left: -1px;\n    margin-top: -1px;\n    transform: rotateZ(45deg);\n    position: relative;\n    &:before,\n    &:after {\n      content: \"\";\n      position: absolute;\n      background: rgb(10, 10, 10);\n    }\n    &:before {\n      height: 100%;\n      width: 3px;\n      left: 50%;\n      transform: translateX(-50%);\n    }\n    &:after {\n      height: 3px;\n      width: 100%;\n      left: 0px;\n      top: 50%;\n      transform: translateY(-50%);\n    }\n  }\n  .window {\n    min-height: 200px;\n    min-width:400px;\n    margin: 1rem 1rem 0 0;\n  }\n`;\n\nexport type Forecast = {\n  name: string;\n  dt: number;\n  main: {\n    temp: number;\n    feels_like: number;\n    temp_min: number;\n    temp_max: number;\n  };\n  weather: [{ description: string; icon: string }];\n  zipCode: string;\n};\n\nconst Forecasts = ({ forecasts, removeForecast }: { forecasts: Forecast[], removeForecast: (name: string, dt: number) => void }) => {\n  return (\n    <Wrapper>\n      {forecasts.map(\n        ({\n          name,\n          zipCode,\n          dt,\n          main: { temp, feels_like, temp_min, temp_max },\n          weather: [{ description, icon }]\n        }: Forecast) => (\n          <Window className=\"window\" key={name + dt}>\n            <WindowHeader className=\"window-header\">\n              <span>{name} ({zipCode}) at {new Intl.DateTimeFormat('en-US', { timeStyle: 'short' }).format(new Date(dt * 1000))}</span>\n              <Button onClick={() => removeForecast(name, dt)}>\n                <span className=\"close-icon\" />\n              </Button>\n            </WindowHeader>\n            <List shadow={false} fullWidth>\n              <ListItem>{description}</ListItem>\n              <ListItem>\n                <img\n                  src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\n                  alt=\"\"\n                />\n              </ListItem>\n              <ListItem>Current temperature: {temp}째F</ListItem>\n              <ListItem>Feels like: {feels_like}째F</ListItem>\n              <ListItem>\n                Today - min: {temp_min}째F max: {temp_max}째F\n              </ListItem>\n            </List>\n          </Window>\n        )\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Forecasts;\n","import axios from \"axios\";\nimport { useState } from \"react\";\nimport EnterLocation from \"./EnterLocation\";\nimport Forecasts, { Forecast } from \"./Forecasts\";\n\nconst ForecastContainer = () => {\n  const [forecasts, setForecasts] = useState<Forecast[]>([]);\n\n  const addForecast = async (location: string) => {\n    const { data } = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?zip=${location}&appid=${process.env.REACT_APP_APP_ID}&units=imperial`\n    );\n    if (\n      forecasts.find(({ name, dt }) => data.name === name && data.dt === dt)\n    ) {\n      return;\n    }\n    setForecasts([...forecasts, { ...data, zipCode: location }]);\n  };\n\n  const removeForecast = (name: string, dt: number) => {\n    setForecasts(forecasts.filter((forecast) => forecast.name !== name && forecast.dt !== dt));\n  }\n\n  return (\n    <>\n      <EnterLocation addLocation={addForecast} />\n      <Forecasts forecasts={forecasts} removeForecast={removeForecast} />\n    </>\n  );\n};\n\nexport default ForecastContainer;\n","import { createGlobalStyle, ThemeProvider } from \"styled-components\";\n\nimport {\n  styleReset\n  // @ts-ignore\n} from \"react95\";\n// pick a theme of your choice\n// @ts-ignore\nimport original from \"react95/dist/themes/original\";\n// @ts-ignore\n// import hotdogStand from \"react95/dist/themes/hotdogStand\";\n// original Windows95 font (optionally)\n// @ts-ignore\nimport ms_sans_serif from \"react95/dist/fonts/ms_sans_serif.woff2\";\n// @ts-ignore\nimport ms_sans_serif_bold from \"react95/dist/fonts/ms_sans_serif_bold.woff2\";\n\nimport ForecastContainer from \"./ForecastContainer\";\n\nimport \"./App.css\";\n\nconst GlobalStyles = createGlobalStyle`\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif}') format('woff2');\n    font-weight: 400;\n    font-style: normal\n  }\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif_bold}') format('woff2');\n    font-weight: bold;\n    font-style: normal\n  }\n  body {\n    font-family: 'ms_sans_serif';\n  }\n  ${styleReset}\n`;\n\nconst App = () => (\n  <div>\n    <div\n      style={{\n        padding: \"4rem 0 1rem 4rem\"\n      }}\n    >\n      <GlobalStyles />\n      <ThemeProvider theme={original}>\n        <ForecastContainer />\n      </ThemeProvider>\n    </div>\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}